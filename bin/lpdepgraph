#!/usr/bin/env python3

# update python: 
# https://www.itsupportwale.com/blog/how-to-upgrade-to-python-3-8-on-ubuntu-18-04-lts/

# install python3.8-distutils: (?)
# sudo apt install python3.8-distutils

# reinstall pip:
# curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py
# python3 get-pip.py --force-reinstall

# pip3 install networkx matplotlib

import networkx as nx
import matplotlib.pyplot as plt

import os
import re

# test (for performance enh.)
'''
l = list(filter(lambda x : re.match('odoo*', x), os.listdir(odoo_dir)))
get_list_of_files2(l)

def get_list_of_files2(list_of_files):
    all_files = list()
    for entry in list_of_files:
        if os.path.isdir(entry):
            all_files = all_files + get_list_of_files(os.listdir(entry))
        else:
            all_files.append(full_path)

    return all_files
'''
#

def get_list_of_files(odoo_dir):
    list_of_files = os.listdir(odoo_dir)

    all_files = list()
    for entry in list_of_files:
        full_path = os.path.join(odoo_dir, entry)

        if os.path.isdir(full_path):
            all_files = all_files + get_list_of_files(full_path)
        else:
            all_files.append(full_path)

    return all_files

def get_manifest_files(list_of_files):
    manifest_files = list()

    for file_path in list_of_files:
        if re.match(".*(__openerp__|__manifest__).py$", file_path):
            manifest_files.append(file_path)

    return manifest_files

def get_project_and_module_name(file_path):
    x = file_path[len(odoo_dir):].split('/')

    if len(x) < 2:
        return [-1, -1]

    return [x[0], x[1]]

def get_dependencies(file_path):
    fo = open(file_path)
    line = fo.readline()

    dependency = ""
    while line != '':
        if re.match("^\s*'depends'.*:.*\[", line):
            dependency = line
            while line != '' and line.find("]") == -1:
                line = fo.readline()
                dependency += line
            break
        line = fo.readline()
    fo.close()

    dependency = dependency.replace("\n", "").replace(" ", "")
    dependency = dependency.replace("'", "").replace('"', "")
    dependency = dependency[dependency.find('[') + 1:dependency.find(']')]
    dependency = dependency.split(",")
    dependency = list(filter(lambda x : x != "" and not re.match("^#.*", x), dependency))

    return dependency

def get_adjacency_list(manifest_files):
    dic = {}
    for file_path in manifest_files:
        project_name, module_name = get_project_and_module_name(file_path)

        if project_name == -1:
            continue

        dependencies = get_dependencies(file_path)

        if module_name not in dic:
            dic[module_name] = []

        dic[module_name] = dependencies

    return dic

def create_graph(dic):
    g = nx.DiGraph()

    g.add_nodes_from(dic.keys())

    for node, neighs in dic.items():
        for neigh in neighs:
            # TODO: add node if not exists
            g.add_edge(node, neigh)

    return g

def plot_graph(g):
    plt.figure(1, figsize=(20,20))
    nx.draw_circular(g, nodelist=g.nodes, with_labels=True, node_size=30, font_size=8)
    plt.show()

def print_modules_dep(dic):
    for k, v in dic.items():
        print(k)
        for vi in v:
            print('\t', vi)
        print()

odoo_dir = '/usr/share/'

def main():
    # get a list of all files, e.g.:
    # = [/usr/share/proj1/mod1, /usr/share/proj2/mod2, ..., /usr/share/proj3/mod3]
    list_of_files = get_list_of_files(odoo_dir)

    # get only the manifest files from that list
    manifest_files = get_manifest_files(list_of_files)

    # get adjacency list of module dependencies, e.g.:
    # {'module_name': [module_name_dep1, module_name_dep2, ..., module_name_depX]}
    dic = get_adjacency_list(manifest_files)

    # construct a graph from the adjacency list
    g = create_graph(dic)

    # print adjacency list
    print_modules_dep(dic)

    # print circular dependencies
    list_of_cycles = list(nx.simple_cycles(g))
    for cycle in list_of_cycles:
        print("dependency cycle: ", cycle)
    
main()
